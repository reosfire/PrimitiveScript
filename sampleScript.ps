fun quickSort(numbers, left, right) {
    if (left.greaterEquals(right)) {
        return void
    }

    var pivotIndex = this.partition(numbers, left, right)
    this.quickSort(numbers, left, pivotIndex.minus(1))
    this.quickSort(numbers, pivotIndex.plus(1), right)
}

fun partition(numbers, left, right) {
    var pivot = numbers.get(right)
    var i = left.minus(1)
    var j = left

    while (j.less(right)) {
        if (numbers.get(j).lessEquals(pivot)) {
            i.increment()
            var temp = numbers.get(i)
            numbers.set(i, numbers.get(j))
            numbers.set(j, temp)
        }
        j.increment()
    }

    var temp = numbers.get(i.plus(1))
    numbers.set(i.plus(1), numbers.get(right))
    numbers.set(right, temp)

    return i.plus(1)
}

fun main() {
    this.println("Enter number of elements: ")
    var numElements = this.int(this.readln())

    var numbers = new.list()

    var i = 0
    while (i.less(numElements)) {
        this.println("Enter number: ")
        var num = this.int(this.readln())
        numbers.add(num)
        i.increment()
    }

    this.quickSort(numbers, 0, numbers.size().minus(1))

    this.println("Sorted numbers: ")
    var j = 0
    while (j.less(numbers.size())) {
        this.println(numbers.get(j))
        j.increment()
    }
}
