fun main() {
    print("Enter number of elements: ")
    numElements = int(readln())

    numbersQuick = new.list()
    numbersBubble = new.list()

    i = 0
    while (i < numElements) {
        print("Enter number: ")
        num = int(readln())
        numbersQuick.add(num)
        numbersBubble.add(new.int(num))
        i.increment()
    }

    println("Sorted numbers using quick sort: ")
    quickSort(numbersQuick, 0, numbersQuick.size() - 1)
    j = 0
    while (j < numbersQuick.size()) {
        println(numbersQuick[j])
        j.increment()
    }

    println("Sorted numbers using bubble sort:")
    bubbleSort(numbersBubble)
    k = 0
    while (k < numbersBubble.size()) {
        println(numbersBubble[k])
        k.increment()
    }

    println("Enter number to binary search: ")
    target = int(readln())
    result = binarySearch(numbersBubble, 0, numbersBubble.size() - 1, target)
    if (result == -1) {
        println("Number not found.")
    } else {
        print("Number found at index: ")
        println(result)
    }
}

fun bubbleSort(numbers) {
    n = numbers.size()
    i = 0
    while (i < n) {
        j = 0
        while (j < n - i - 1) {
            if (numbers[j] > numbers[j + 1]) {
                temp = numbers[j]
                numbers[j] = numbers[j + 1]
                numbers[j + 1] = temp
            }
            j.increment()
        }
        i.increment()
    }
}

fun quickSort(numbers, left, right) {
    if (left >= right) return void

    pivotIndex = partition(numbers, left, right)
    quickSort(numbers, left, pivotIndex - 1)
    quickSort(numbers, pivotIndex + 1, right)
}

fun partition(numbers, left, right) {
    pivot = numbers[right]
    i = left - 1
    j = new.int(left)

    while (j < right) {
        if (numbers[j] <= pivot) {
            i.increment()
            temp = numbers[i]
            numbers[i] = numbers[j]
            numbers[j] = temp
        }
        j.increment()
    }

    temp = numbers[i + 1]
    numbers[i + 1] = numbers[right]
    numbers[right] = temp

    return i + 1
}

fun binarySearch(numbers, left, right, target) {
    if (left > right) return -1

    mid = (left + right) / 2
    if (numbers[mid] == target) return mid
    else if (numbers[mid] > target) return binarySearch(numbers, left, mid - 1, target)
    else return binarySearch(numbers, mid + 1, right, target)
}
