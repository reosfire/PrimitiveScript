fun main() {
    print("Enter number of elements: ")
    var numElements = int(readln())

    var numbers = new.list()

    var i = 0
    while (i < numElements) {
        print("Enter number: ")
        var num = int(readln())
        numbers.add(num)
        i.increment()
    }

    println("Sorted numbers using quick sort: ")
    quickSort(numbers, 0, numbers.size() - 1)
    var j = 0
    while (j < numbers.size()) {
        println(numbers[j])
        j.increment()
    }

    println("Sorted numbers using bubble sort:")
    bubbleSort(numbers)
    var k = 0
    while (k < numbers.size()) {
        println(numbers[k])
        k.increment()
    }

    println("Enter number to binary search: ")
    var target = int(readln())
    var result = binarySearch(numbers, 0, numbers.size() - 1, target)
    if (result == -1) {
        println("Number not found.")
    } else {
        print("Number found at index: ")
        println(result)
    }
}

fun bubbleSort(numbers) {
    var n = numbers.size()
    var i = 0
    while (i < n) {
        var j = 0
        while (j < n - i - 1) {
            if (numbers[j] > numbers[j + 1]) {
                var temp = numbers[j]
                numbers.set(j, numbers[j + 1])
                numbers.set(j + 1, temp)
            }
            j.increment()
        }
        i.increment()
    }
}

fun quickSort(numbers, left, right) {
    if (left >= right) {
        return void
    }

    var pivotIndex = partition(numbers, left, right)
    quickSort(numbers, left, pivotIndex - 1)
    quickSort(numbers, pivotIndex + 1, right)
}

fun partition(numbers, left, right) {
    var pivot = numbers[right]
    var i = left - 1
    var j = new.int(left)

    while (j < right) {
        if (numbers[j] <= pivot) {
            i.increment()
            var temp = numbers[i]
            numbers.set(i, numbers[j])
            numbers.set(j, temp)
        }
        j.increment()
    }

    var temp = numbers[i + 1]
    numbers.set(i + 1, numbers[right])
    numbers.set(right, temp)

    return i + 1
}

fun binarySearch(numbers, left, right, target) {
    if (left > right) {
        return -1
    }

    var mid = (left + right) / 2
    if (numbers[mid] == target) {
        return mid
    } else if (numbers[mid] > target) {
        return binarySearch(numbers, left, mid - 1, target)
    } else {
        return binarySearch(numbers, mid + 1, right, target)
    }
}
