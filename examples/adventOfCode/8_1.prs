fun main() {
    lines = new.File("input.txt").readText().split("\r\n")
    n = lines.size
    m = lines.get(0).size

    antinodes = new.array(n)
    i = 0
    while (i.less(n)) {
        line = new.array(m)
        j = 0
        while (j.less(m)) {
            line.set(j, false)
            j.increment()
        }
        antinodes.set(i, line)
        i.increment()
    }

    i = 0
    while (i.less(n)) {
        j = 0
        while (j.less(m)) {
            first = lines.get(i).get(j)
            if (first.equal(".")) {
                j.increment()
                continue
            }

            k = 0
            while (k.less(n)) {
                l = 0
                while (l.less(m)) {
                    if (k.equal(i).and(l.equal(j))) {
                        l.increment()
                        continue
                    }

                    second = lines.get(k).get(l)
                    if (first.equal(second).not()) {
                        l.increment()
                        continue
                    }

                    dr = k.minus(i)
                    dc = l.minus(j)

                    r = i.minus(dr)
                    c = j.minus(dc)
                    if (inRange(r, 0, n).and(inRange(c, 0, m))) {
                        antinodes.get(r).set(c, true)
                    }

                    r = k.plus(dr)
                    c = l.plus(dc)
                    if (inRange(r, 0, n).and(inRange(c, 0, m))) {
                        antinodes.get(r).set(c, true)
                    }

                    l.increment()
                }
                k.increment()
            }

            j.increment()
        }
        i.increment()
    }

    result = 0
    i = 0
    while (i.less(n)) {
        j = 0
        while (j.less(m)) {
            if (antinodes.get(i).get(j)) {
                result.increment()
            }
            j.increment()
        }
        i.increment()
    }
    println(result)
}

fun inRange(i, l, r) {
    return i.greaterOrEqual(l).and(i.less(r))
}
