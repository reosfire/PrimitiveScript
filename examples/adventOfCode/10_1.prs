fun main() {
    input = new.File("input.txt").readText().split("\r\n")
    matrix = new.array(input.size)
    i = 0
    while (i < input.size) {
        line = input[i]
        matrixLine = new.array(line.size)
        j = 0
        while (j < line.size) {
            matrixLine.set(j, new.int(line[j]))
            j.increment()
        }
        matrix.set(i, matrixLine)
        i.increment()
    }

    result = 0

    i = 0
    while (i < matrix.size) {
        j = 0
        while (j < matrix[0].size) {
            if (matrix[i][j] == 0) {
                goodPositions = new.list()
                fillGoodPositions(matrix, i, j, goodPositions)
                result.plusAssign(goodPositions.size)
            }
            j.increment()
        }
        i.increment()
    }

    println(result)
}

fun fillGoodPositions(matrix, row, col, goodPositions) {
    current = matrix[row][col]
    if (current == 9) {
        newPosition = newPosition(row, col)
        if (!containsPosition(goodPositions, newPosition))
            goodPositions.add(newPosition)
        return void
    }

    next = current + 1

    if (validCoordinates(matrix, row - 1, col))
        if (matrix[row - 1][col] == next)
            fillGoodPositions(matrix, row - 1, col, goodPositions)

    if (validCoordinates(matrix, row + 1, col))
        if (matrix[row + 1][col] == next)
            fillGoodPositions(matrix, row + 1, col, goodPositions)

    if (validCoordinates(matrix, row, col - 1))
        if (matrix[row][col - 1] == next)
            fillGoodPositions(matrix, row, col - 1, goodPositions)

    if (validCoordinates(matrix, row, col + 1))
        if (matrix[row][col + 1] == next)
            fillGoodPositions(matrix, row, col + 1, goodPositions)
}

fun validCoordinates(matrix, row, col)
    return inRange(row, 0, matrix.size) && inRange(col, 0, matrix[0].size)

fun inRange(i, min, max)
    return i >= min && i < max

fun containsPosition(list, position) {
    i = 0
    while (i < list.size) {
        if (positionsEqual(list[i], position)) return true
        i.increment()
    }
    return false
}

fun positionsEqual(a, b)
    return a[0] == b[0] && a[1] == b[1]

fun newPosition(row, col) {
    res = new.array(2)
    res.set(0, row)
    res.set(1, col)
    return res
}
