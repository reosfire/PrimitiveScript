fun main() {
    var input = new.File("input.txt").readText().split("\r\n")
    var matrix = new.array(input.size())
    var i = 0
    while (i < input.size()) {
        var line = input.get(i)
        var matrixLine = new.array(line.size())
        var j = 0
        while (j < line.size()) {
            matrixLine.set(j, new.int(line.get(j)))
            j.increment()
        }
        matrix.set(i, matrixLine)
        i.increment()
    }

    var result = 0

    var i = 0
    while (i < matrix.size()) {
        var j = 0
        while (j < matrix.get(0).size()) {
            if (matrix.get(i).get(j) == 0) {
                var goodPositions = new.list()
                fillGoodPositions(matrix, i, j, goodPositions)
                result.plusAssign(goodPositions.size())
            }
            j.increment()
        }
        i.increment()
    }

    println(result)
}

fun fillGoodPositions(matrix, row, col, goodPositions) {
    var current = matrix.get(row).get(col)
    if (current == 9) {
        var newPosition = newPosition(row, col)
        if (containsPosition(goodPositions, newPosition).not()) {
            goodPositions.add(newPosition)
        }
        return void
    }

    var next = current + 1

    if (validCoordinates(matrix, row - 1, col)) {
        if (matrix.get(row - 1).get(col) == next) {
            fillGoodPositions(matrix, row - 1, col, goodPositions)
        }
    }
    if (validCoordinates(matrix, row + 1, col)) {
        if (matrix.get(row + 1).get(col) == next) {
            fillGoodPositions(matrix, row + 1, col, goodPositions)
        }
    }
    if (validCoordinates(matrix, row, col - 1)) {
        if (matrix.get(row).get(col - 1) == next) {
            fillGoodPositions(matrix, row, col - 1, goodPositions)
        }
    }
    if (validCoordinates(matrix, row, col + 1)) {
        if (matrix.get(row).get(col + 1) == next) {
            fillGoodPositions(matrix, row, col + 1, goodPositions)
        }
    }
}

fun validCoordinates(matrix, row, col) {
    return inRange(row, 0, matrix.size()) && inRange(col, 0, matrix.get(0).size())
}

fun inRange(i, min, max) {
    return i >= min && i < max
}

fun containsPosition(list, position) {
    var i = 0
    while (i < list.size()) {
        if (positionsEqual(list.get(i), position)) {
            return true
        }
        i.increment()
    }
    return false
}

fun positionsEqual(a, b) {
    return a.get(0) == b.get(0) && a.get(1) == b.get(1)
}

fun newPosition(row, col) {
    var res = new.array(2)
    res.set(0, row)
    res.set(1, col)
    return res
}
