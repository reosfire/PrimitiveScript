fun main() {
    inputText = new.File("input.txt").readText()
    inputLines = inputText.split("\r\n")
    n = inputLines.size()
    m = inputLines.get(0).size()

    result = 0

    obstacleRow = 0
    while (obstacleRow.less(n)) {
        obstacleCol = 0
        while (obstacleCol.less(m)) {
            if (inputLines.get(obstacleRow).get(obstacleCol).equal("#")) {
                 obstacleCol.increment()
                 continue
            }
            if (inputLines.get(obstacleRow).get(obstacleCol).equal("^")) {
                 obstacleCol.increment()
                 continue
            }
            if (isStuck(inputText, obstacleRow, obstacleCol)) {
                print(obstacleRow)
                print(" ")
                print(obstacleCol)
                println()

                result.increment()
            }
            obstacleCol.increment()
        }
        obstacleRow.increment()
    }

    println(result)
}

fun isStuck(inputText, obstacleRow, obstacleCol) {
    inputLines = inputText.split("\n")
    inputLines.get(obstacleRow).replaceAt(obstacleCol, "#")

    n = inputLines.size()
    m = inputLines.get(0).size()

    currentRow = 0
    currentCol = 0

    i = 0
    while (i.less(inputLines.size())) {
        line = inputLines.get(i)
        j = 0
        while (j.less(line.size())) {
            char = line.get(j)
            if (char.equal("^")) {
                currentRow.set(i)
                currentCol.set(j)
            }
            j.increment()
        }
        i.increment()
    }

    directionRow = -1
    directionCol = 0

    count = 0
    while (count.less(20000)) {
        nextRow = currentRow.plus(directionRow)
        nextCol = currentCol.plus(directionCol)

        if (nextRow.less(0).or(nextRow.greaterOrEqual(n)).or(nextCol.less(0)).or(nextCol.greaterOrEqual(m))) {
            return false
        }
        while (inputLines.get(nextRow).get(nextCol).equal("#")) {
            newDirectionRow = rotateDirectionRow(directionRow, directionCol)
            newDirectionCol = rotateDirectionCol(directionCol, directionRow)
            directionRow.set(newDirectionRow)
            directionCol.set(newDirectionCol)
            nextRow.set(currentRow.plus(directionRow))
            nextCol.set(currentCol.plus(directionCol))
        }

        currentRow.set(nextRow)
        currentCol.set(nextCol)

        count.increment()
    }

    return true
}

fun rotateDirectionRow(row, col) {
    if (row.equal(0).not()) {
        return 0
    }
    if (col.equal(1)) {
        return 1
    }
    return -1
}

fun rotateDirectionCol(col, row) {
    if (col.equal(0).not()) {
        return 0
    }
    if (row.equal(1)) {
        return -1
    }
    return 1
}
